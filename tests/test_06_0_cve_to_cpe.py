import os
import subprocess
import unittest
from arango import ArangoClient
from dotenv import load_dotenv
from stix2arango.stix2arango import Stix2Arango

from .upload import make_uploads

# Load environment variables
load_dotenv()

ARANGODB_USERNAME = os.getenv("ARANGODB_USERNAME", "root")
ARANGODB_PASSWORD = os.getenv("ARANGODB_PASSWORD", "")
ARANGODB_HOST_URL = os.getenv("ARANGODB_HOST_URL", "http://127.0.0.1:8529")
TESTS_DATABASE = "arango_cti_processor_standard_tests_database"
TEST_MODE = "cve-cpe"
STIX2ARANGO_NOTE = __name__.split('.')[-1]
IGNORE_EMBEDDED_RELATIONSHIPS = "false"

client = ArangoClient(hosts=f"{ARANGODB_HOST_URL}")

class TestArangoDB(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        make_uploads([
                ("nvd_cve", "tests/files/cve-cpe-bundle-with-cves.json"),
                ("nvd_cpe", "tests/files/cve-cpe-bundle-with-cpes.json"),
            ], database="arango_cti_processor_standard_tests", delete_db=True, 
            host_url=ARANGODB_HOST_URL, password=ARANGODB_PASSWORD, username=ARANGODB_USERNAME, stix2arango_note=STIX2ARANGO_NOTE)
        print(f'======Test bundles uploaded successfully======')
        # Run the arango_cti_processor.py script
        subprocess.run([
            "python3", "arango_cti_processor.py",
            "--database", TESTS_DATABASE,
            "--relationship", TEST_MODE,
            "--stix2arango_note", STIX2ARANGO_NOTE,
            "--ignore_embedded_relationships", IGNORE_EMBEDDED_RELATIONSHIPS
        ], check=True)
        print(f'======arango_cti_processor run successfully======')
        
        cls.db = client.db('arango_cti_processor_standard_tests_database', username=ARANGODB_USERNAME, password=ARANGODB_PASSWORD)

    def run_query(self, query):
        cursor = self.db.aql.execute(query)
        return [count for count in cursor]

    # should still return 2 objects b/c these never update
    def test_01_auto_imported_objects(self):
        query = """
          FOR doc IN nvd_cve_vertex_collection
            FILTER doc._arango_cti_processor_note == "automatically imported object at script runtime"
            RETURN doc.id
        """
        result_count = self.run_query(query)
        expected_ids = [
            "marking-definition--2e51a631-99d8-52a5-95a6-8314d3f4fbf3",
            "identity--2e51a631-99d8-52a5-95a6-8314d3f4fbf3"
        ]
        self.assertEqual(result_count, expected_ids, f"Expected {expected_ids}, but found {result_count}.")

    # test 2 Should return all the SROs generated by arango_cti_processor -- expected = 29 (17 in pattern / 12 is vuln)
    def test_02_arango_cti_processor_note(self):
        query = """
        RETURN COUNT(
          FOR doc IN nvd_cve_edge_collection
          FILTER doc._arango_cti_processor_note == "cve-cpe"
          AND doc._is_ref == false
            RETURN doc
        )
        """
        result_count = self.run_query(query)
        self.assertEqual(result_count, [29], f"Expected 29 documents, but found {result_count}.")

# 
    def test_03_check_vulnerable_not_vulnerable(self):
        query = """
        RETURN COUNT(
          FOR doc IN nvd_cve_edge_collection
          FILTER doc._arango_cti_processor_note == "cve-cpe"
          AND doc.relationship_type == "pattern-contains"
          AND doc._is_ref == false
            RETURN doc
        )
        """
        result_count = self.run_query(query)
        self.assertEqual(result_count, [17], f"Expected 17 documents, but found {result_count}.")

#
    def test_04_check_vulnerable_not_vulnerable(self):
        query = """
        RETURN COUNT(
          FOR doc IN nvd_cve_edge_collection
          FILTER doc._arango_cti_processor_note == "cve-cpe"
          AND doc.relationship_type == "is-vulnerable"
          AND doc._is_ref == false
            RETURN doc
        )
        """
        result_count = self.run_query(query)
        self.assertEqual(result_count, [12], f"Expected 12 documents, but found {result_count}.")

    # checks the correct number of objects are generated, and that they are assigned the correct properties by the script
    def test_05_correct_object_properties(self):
        query = """
        RETURN COUNT(
          FOR doc IN nvd_cve_edge_collection
          FILTER doc._arango_cti_processor_note == "cve-cpe"
          AND doc.created_by_ref == "identity--2e51a631-99d8-52a5-95a6-8314d3f4fbf3"
          AND doc.object_marking_refs == [
            "marking-definition--94868c89-83c2-464b-929b-a1a8aa3c8487",
            "marking-definition--2e51a631-99d8-52a5-95a6-8314d3f4fbf3"
          ]
          AND doc._is_ref == false
          RETURN doc
        )
        """
        result_count = self.run_query(query)
        self.assertEqual(result_count, [29], f"Expected 29 documents, but found {result_count}.")

    def test_06_test_relationships_to_cpes(self):
        query = """
        RETURN COUNT(
          FOR doc IN nvd_cve_edge_collection
              FILTER doc.source_ref == "indicator--b16b3dec-492f-5738-8514-238b5316188f"
              AND doc.relationship_type == "pattern-contains"
              AND doc._is_ref == false
              RETURN doc
        )
        """
        result_count = self.run_query(query)
        self.assertEqual(result_count, [17], f"Expected 17 documents, but found {result_count}.")

# no updates to the objects should have happened yet

    def test_07_check_no_updates(self):
        query = """
            RETURN LENGTH(
              FOR doc IN nvd_cve_edge_collection
                FILTER doc._is_latest == false
                AND doc._arango_cti_processor_note == "cve-cpe"
                AND doc._is_ref == false
                RETURN doc
            )
        """
        cursor = self.db.aql.execute(query)
        result_count = [count for count in cursor]

        self.assertEqual(result_count, [0], f"Expected 0 documents, but found {result_count}.")

    #`2e51a631-99d8-52a5-95a6-8314d3f4fbf3` `pattern-contains+nvd_cve_vertex_collection/indicator--b16b3dec-492f-5738-8514-238b5316188f+nvd_cpe_vertex_collection/software--4077613e-eab0-5210-8f1a-45e649c89b57` = `relationship--993cbd01-f064-5815-ba6f-ff5e2e32e7ab`
   
    def test_08_test_relationships_to_cpes_ids(self):
        query = """
        FOR doc IN nvd_cve_edge_collection
            FILTER doc.source_ref == "indicator--b16b3dec-492f-5738-8514-238b5316188f"
            AND doc.relationship_type == "pattern-contains"
            AND doc._is_ref == false
            SORT doc.id ASC
            RETURN doc.id
        """
        result_count = self.run_query(query)
        expected_ids = [
          "relationship--00832217-598f-5d7a-ab11-234ad4e85406",
          "relationship--01b9e120-6706-5cfb-a4e7-fb1c00fb5e69",
          "relationship--0bac9ab3-296e-5e6f-a2bd-3f6249dd26a4",
          "relationship--104ec89c-9e26-534c-b702-6518858aa45f",
          "relationship--2fbc3599-47bb-5fcb-a7ea-1221c9e498b1",
          "relationship--393a10ef-80e8-5459-8145-f7abc47ee031",
          "relationship--6dc7b3e2-affc-5cf8-ae94-2233effa57f6",
          "relationship--73974374-6e85-53c6-a3e9-dfcbb2e0fb98",
          "relationship--993cbd01-f064-5815-ba6f-ff5e2e32e7ab",
          "relationship--9ffeb564-0117-5dba-9951-fad521614ccd",
          "relationship--a261df26-71ef-5353-910b-1479a14dfaae",
          "relationship--baa14779-35e1-5d17-afaa-da3f1ece8f38",
          "relationship--bac3d396-ac0a-58cd-bc7e-77c74f09b8df",
          "relationship--d2b2d8b4-a25a-54bb-990c-866820f8f4f0",
          "relationship--d70bc2c8-4b8f-5f52-bc6b-60981715f9fd",
          "relationship--dc3781ef-4b7a-526f-88cc-de76624b26bc",
          "relationship--f134f394-ca65-57ab-9aec-88b061e29b4f"
        ]
        self.assertEqual(result_count, expected_ids, f"Expected {expected_ids}, but found {result_count}.")

    #`2e51a631-99d8-52a5-95a6-8314d3f4fbf3` `is-vulnerable+nvd_cve_vertex_collection/indicator--b16b3dec-492f-5738-8514-238b5316188f+nvd_cpe_vertex_collection/software--aa3b0bc5-4e00-5429-90b8-692d2fd2481c` = `relationship--016c51db-50ac-54aa-bb4b-8443e6a66e89`

    def test_09_test_vulnerable_relationships_to_cpes_ids(self):
        query = """
        FOR doc IN nvd_cve_edge_collection
            FILTER doc.source_ref == "indicator--b16b3dec-492f-5738-8514-238b5316188f"
            AND doc.relationship_type == "is-vulnerable"
            AND doc._is_ref == false
            SORT doc.id ASC
            RETURN doc.id
        """
        result_count = self.run_query(query)
        expected_ids = [
          "relationship--016c51db-50ac-54aa-bb4b-8443e6a66e89",
          "relationship--15c926b2-baba-5b55-a63a-0e835d1d5891",
          "relationship--223ca53e-a4b7-5a38-b1d1-8dd1a6a6a9e8",
          "relationship--2730b020-61e0-5ba5-93ea-b2ddcdef5ed6",
          "relationship--3558f569-18b7-5d63-9b21-dd4f01854fc7",
          "relationship--3a838302-5078-54f6-9bf4-69420b683b24",
          "relationship--6bc4678e-f5a4-5156-9e40-0498f151269c",
          "relationship--9ed35111-d279-5c47-9a1a-ef643e89f740",
          "relationship--b1478592-0d61-50a8-b479-f2c02d91c765",
          "relationship--ccf07206-ddb4-5ddb-b37f-3421c6dc8ae5",
          "relationship--f8fc0bb4-055c-5636-8fe5-1c10dc7ff7a4",
          "relationship--f9d7752b-a792-548f-8b84-df2d53712ee0"
        ]
        self.assertEqual(result_count, expected_ids, f"Expected {expected_ids}, but found {result_count}.")

if __name__ == '__main__':
    unittest.main()