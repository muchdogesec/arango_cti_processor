import os
import subprocess
import unittest
from arango import ArangoClient
from dotenv import load_dotenv
from stix2arango.stix2arango import Stix2Arango

from .upload import make_uploads

# Load environment variables
load_dotenv()

ARANGODB_USERNAME = os.getenv("ARANGODB_USERNAME", "root")
ARANGODB_PASSWORD = os.getenv("ARANGODB_PASSWORD", "")
ARANGODB_HOST_URL = os.getenv("ARANGODB_HOST_URL", "http://127.0.0.1:8529")
TESTS_DATABASE = "arango_cti_processor_standard_tests_database"
TEST_MODE = "cve-cpe"
STIX2ARANGO_NOTE = __name__.split('.')[-1]
IGNORE_EMBEDDED_RELATIONSHIPS = "false"

client = ArangoClient(hosts=f"{ARANGODB_HOST_URL}")

class TestArangoDB(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        make_uploads([
                ("nvd_cve", "tests/files/cve-cpe-bundle-with-cves.json"),
                ("nvd_cpe", "tests/files/cve-cpe-bundle-with-cpes.json"),
            ], database="arango_cti_processor_standard_tests", delete_db=True, 
            host_url=ARANGODB_HOST_URL, password=ARANGODB_PASSWORD, username=ARANGODB_USERNAME, stix2arango_note=STIX2ARANGO_NOTE)
        print(f'======Test bundles uploaded successfully======')
        # Run the arango_cti_processor.py script
        subprocess.run([
            "python3", "arango_cti_processor.py",
            "--database", TESTS_DATABASE,
            "--relationship", TEST_MODE,
            "--stix2arango_note", STIX2ARANGO_NOTE,
            "--ignore_embedded_relationships", IGNORE_EMBEDDED_RELATIONSHIPS
        ], check=True)
        print(f'======arango_cti_processor run successfully======')
        
        cls.db = client.db('arango_cti_processor_standard_tests_database', username=ARANGODB_USERNAME, password=ARANGODB_PASSWORD)

    def run_query(self, query):
        cursor = self.db.aql.execute(query)
        return [count for count in cursor]

    # should still return 2 objects b/c these never update
    def test_01_auto_imported_objects(self):
        query = """
          FOR doc IN nvd_cve_vertex_collection
            FILTER doc._arango_cti_processor_note == "automatically imported object at script runtime"
            RETURN doc.id
        """
        result_count = self.run_query(query)
        expected_ids = [
            "marking-definition--2e51a631-99d8-52a5-95a6-8314d3f4fbf3",
            "identity--2e51a631-99d8-52a5-95a6-8314d3f4fbf3"
        ]
        self.assertEqual(result_count, expected_ids, f"Expected {expected_ids}, but found {result_count}.")

    # test 2 Should return all the SROs generated by arango_cti_processor -- expected = 6
    def test_02_arango_cti_processor_note(self):
        query = """
        RETURN COUNT(
          FOR doc IN nvd_cve_edge_collection
          FILTER doc._arango_cti_processor_note == "cve-cpe"
            RETURN doc
        )
        """
        result_count = self.run_query(query)
        self.assertEqual(result_count, [6], f"Expected 6 documents, but found {result_count}.")

# after lookup 5 swid returned
    def test_03_check_vulnerable_not_vulnerable(self):
        query = """
        RETURN COUNT(
          FOR doc IN nvd_cve_edge_collection
          FILTER doc._arango_cti_processor_note == "cve-cpe"
          AND doc.relationship_type == "pattern-contains"
            RETURN doc
        )
        """
        result_count = self.run_query(query)
        self.assertEqual(result_count, [5], f"Expected 5 documents, but found {result_count}.")

# after lookup only 1 swid returned
    def test_04_check_vulnerable_not_vulnerable(self):
        query = """
        RETURN COUNT(
          FOR doc IN nvd_cve_edge_collection
          FILTER doc._arango_cti_processor_note == "cve-cpe"
          AND doc.relationship_type == "is-vulnerable"
            RETURN doc
        )
        """
        result_count = self.run_query(query)
        self.assertEqual(result_count, [1], f"Expected 1 documents, but found {result_count}.")

    # checks the correct number of objects are generated, and that they are assigned the correct properties by the script
    def test_05_correct_object_properties(self):
        query = """
        RETURN COUNT(
          FOR doc IN nvd_cve_edge_collection
          FILTER doc._arango_cti_processor_note == "cve-cpe"
          AND doc.created_by_ref == "identity--2e51a631-99d8-52a5-95a6-8314d3f4fbf3"
          AND doc.object_marking_refs == [
            "marking-definition--94868c89-83c2-464b-929b-a1a8aa3c8487",
            "marking-definition--2e51a631-99d8-52a5-95a6-8314d3f4fbf3"
          ]
          RETURN doc
        )
        """
        result_count = self.run_query(query)
        self.assertEqual(result_count, [6], f"Expected 6 documents, but found {result_count}.")

    def test_06_test_relationships_to_cpes(self):
        query = """
        RETURN COUNT(
          FOR doc IN nvd_cve_edge_collection
              FILTER doc.source_ref == "indicator--570304ae-02cf-542b-ab7a-77e7ada2f48e"
              AND doc.relationship_type == "pattern-contains"
              RETURN doc
        )
        """
        result_count = self.run_query(query)
        self.assertEqual(result_count, [5], f"Expected 5 documents, but found {result_count}.")

# no updates to the objects should have happened yet

    def test_07_check_no_updates(self):
        query = """
            RETURN LENGTH(
              FOR doc IN nvd_cve_edge_collection
                FILTER doc._is_latest == false
                AND doc._arango_cti_processor_note == "cve-cpe"
                RETURN doc
            )
        """
        cursor = self.db.aql.execute(query)
        result_count = [count for count in cursor]

        self.assertEqual(result_count, [0], f"Expected 0 documents, but found {result_count}.")

# test 8 is broken
    # same as test 4 but checks sro id generation
    #`cpe:2.3:a:atlassian:confluence_server:7.19.9:*:*:*:*:*:*:*`
    #`2e51a631-99d8-52a5-95a6-8314d3f4fbf3` `pattern-contains+nvd_cve_vertex_collection/indicator--5d45090c-57fe-543e-96a9-bbd5ea9d6cb6+nvd_cpe_vertex_collection/software--50fa0834-9c63-5b0f-bf0e-dce02183253a` = `relationship--d177fcc4-6991-5d5f-8885-7c27f374fce5`
    #`cpe:2.3:a:atlassian:confluence_server:7.19.7:*:*:*:*:*:*:*`
    #`2e51a631-99d8-52a5-95a6-8314d3f4fbf3` `pattern-contains+nvd_cve_vertex_collection/indicator--5d45090c-57fe-543e-96a9-bbd5ea9d6cb6+nvd_cpe_vertex_collection/software--23b14f0d-c539-50bc-bdc2-38d68d849732` = `relationship--f77ec4f3-f855-5dfd-9a4c-81b9124f15ac`
    def test_08_test_relationships_to_cpes_ids(self):
        query = """
        FOR doc IN nvd_cve_edge_collection
            FILTER doc.source_ref == "indicator--570304ae-02cf-542b-ab7a-77e7ada2f48e"
            AND doc.relationship_type == "pattern-contains"
            RETURN doc.id
        """
        result_count = self.run_query(query)
        expected_ids = [
            "relationship--d177fcc4-6991-5d5f-8885-7c27f374fce5",
            "relationship--f77ec4f3-f855-5dfd-9a4c-81b9124f15ac"
        ]
        self.assertEqual(result_count, expected_ids, f"Expected {expected_ids}, but found {result_count}.")

# test 9 is broken

    def test_09_test_vulnerable_relationships_to_cpes_ids(self):
        query = """
        FOR doc IN nvd_cve_edge_collection
            FILTER doc.source_ref == "indicator--570304ae-02cf-542b-ab7a-77e7ada2f48e"
            AND doc.relationship_type == "is-vulnerable"
            RETURN doc.id
        """
        result_count = self.run_query(query)
        expected_ids = [
            "relationship--d177fcc4-6991-5d5f-8885-7c27f374fce5",
            "relationship--f77ec4f3-f855-5dfd-9a4c-81b9124f15ac"
        ]
        self.assertEqual(result_count, expected_ids, f"Expected {expected_ids}, but found {result_count}.")

if __name__ == '__main__':
    unittest.main()