import os
import subprocess
from arango import ArangoClient
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

ARANGO_USERNAME = os.getenv("ARANGODB_USERNAME")
ARANGO_PASSWORD = os.getenv("ARANGODB_PASSWORD")
ARANGO_HOST = os.getenv("ARANGODB_HOST", "localhost")
ARANGO_PORT = os.getenv("ARANGODB_PORT", "8529")

client = ArangoClient(hosts=f"http://{ARANGO_HOST}:{ARANGO_PORT}")

# Run the import script
subprocess.run([
    "python3", "arango_cti_processor.py",
    "--database", "arango_cti_processor_standard_tests_database",
    "--relationship", "cve-cpe",
    "--stix2arango_note", "test06",
    "--ignore_embedded_relationships", "false"
], check=True)

print('Script executed successfully.')

def test_01_auto_imported_objects():
    db = client.db('arango_cti_processor_standard_tests_database', username=ARANGO_USERNAME, password=ARANGO_PASSWORD)
    query = """
      FOR doc IN nvd_cve_vertex_collection
        FILTER doc._arango_cti_processor_note == "automatically imported object at script runtime"
        RETURN doc.id
    """
    cursor = db.aql.execute(query)
    result_count = [count for count in cursor]

    expected_ids = [
        "marking-definition--2e51a631-99d8-52a5-95a6-8314d3f4fbf3",
        "identity--2e51a631-99d8-52a5-95a6-8314d3f4fbf3"
    ]

    assert result_count == expected_ids, f"Expected {expected_ids}, but found {result_count}."
    print(f"Test passed. Found documents with the specified note: {result_count}")

test_01_auto_imported_objects()

# test 2 Should return all the SROs generated by arango_cti_processor -- expected = 6

def test_02_arango_cti_processor_note():
    db = client.db('arango_cti_processor_standard_tests_database', username=ARANGO_USERNAME, password=ARANGO_PASSWORD)
    query = """
    RETURN COUNT(
      FOR doc IN nvd_cve_edge_collection
      FILTER doc._arango_cti_processor_note == "cve-cpe"
        RETURN doc
    )
    """
    cursor = db.aql.execute(query)
    result_count = [count for count in cursor]

    assert result_count == [6], f"Expected 6 documents, but found {result_count}."
    print(f"Test passed. Found {result_count[0]} documents with the specified criteria.")

test_02_arango_cti_processor_note()

def test_03_correct_object_properties():
    db = client.db('arango_cti_processor_standard_tests_database', username=ARANGO_USERNAME, password=ARANGO_PASSWORD)
    query = """
    RETURN COUNT(
      FOR doc IN nvd_cve_edge_collection
      FILTER doc.relationship_type == "pattern-contains"
      AND doc._arango_cti_processor_note == "cve-cpe"
      AND doc.created_by_ref == "identity--2e51a631-99d8-52a5-95a6-8314d3f4fbf3"
      AND doc.object_marking_refs == [
        "marking-definition--94868c89-83c2-464b-929b-a1a8aa3c8487",
        "marking-definition--2e51a631-99d8-52a5-95a6-8314d3f4fbf3"
      ]
      RETURN doc
    )
    """
    cursor = db.aql.execute(query)
    result_count = [count for count in cursor]

    assert result_count == [6], f"Expected 6 documents, but found {result_count}."
    print(f"Test passed. Found {result_count[0]} documents with the specified criteria.")

test_03_correct_object_properties()

# indicator--5d45090c-57fe-543e-96a9-bbd5ea9d6cb6 has 2 cpes

def test_04_test_relationships_to_cpes():
    db = client.db('arango_cti_processor_standard_tests_database', username=ARANGO_USERNAME, password=ARANGO_PASSWORD)
    query = """
    RETURN COUNT(
      FOR doc IN nvd_cve_edge_collection
          FILTER doc.source_ref == "indicator--5d45090c-57fe-543e-96a9-bbd5ea9d6cb6"
          AND doc.relationship_type == "pattern-contains"
          RETURN doc
    )
    """
    cursor = db.aql.execute(query)
    result_count = [count for count in cursor]

    assert result_count == [2], f"Expected 2 documents, but found {result_count}."
    print(f"Test passed. Found {result_count[0]} documents with the specified criteria.")

test_04_test_relationships_to_cpes()

# same as test 4 but checks sro id generation
#`cpe:2.3:a:atlassian:confluence_server:7.19.9:*:*:*:*:*:*:*`
#`2e51a631-99d8-52a5-95a6-8314d3f4fbf3` `pattern-contains+nvd_cve_vertex_collection/indicator--5d45090c-57fe-543e-96a9-bbd5ea9d6cb6+nvd_cpe_vertex_collection/software--50fa0834-9c63-5b0f-bf0e-dce02183253a` = `relationship--d177fcc4-6991-5d5f-8885-7c27f374fce5`
#`cpe:2.3:a:atlassian:confluence_server:7.19.7:*:*:*:*:*:*:*`
#`2e51a631-99d8-52a5-95a6-8314d3f4fbf3` `pattern-contains+nvd_cve_vertex_collection/indicator--5d45090c-57fe-543e-96a9-bbd5ea9d6cb6+nvd_cpe_vertex_collection/software--23b14f0d-c539-50bc-bdc2-38d68d849732` = `relationship--f77ec4f3-f855-5dfd-9a4c-81b9124f15ac`

def test_05_test_relationships_to_cpes():
    db = client.db('arango_cti_processor_standard_tests_database', username=ARANGO_USERNAME, password=ARANGO_PASSWORD)
    query = """
    RETURN COUNT(
      FOR doc IN nvd_cve_edge_collection
          FILTER doc.source_ref == "indicator--5d45090c-57fe-543e-96a9-bbd5ea9d6cb6"
          AND doc.relationship_type == "pattern-contains"
          RETURN doc.id
    )
    """
    cursor = db.aql.execute(query)
    result_count = [count for count in cursor]

    expected_ids = [
        "relationship--d177fcc4-6991-5d5f-8885-7c27f374fce5",
        "relationship--f77ec4f3-f855-5dfd-9a4c-81b9124f15ac"
    ]

    assert result_count == expected_ids, f"Expected {expected_ids}, but found {result_count}."
    print(f"Test passed. Found documents with the specified note: {result_count}")
test_05_test_relationships_to_cpes()